---
id: 2
title: Popover
description: Display Content that floats around a trigger
---

<script lang="ts">
	import Popover from '$lib/popover/Popover.svelte'
	import Button from '$lib/button/Button.svelte'
	import Demo from './../_components/Demo.svelte'
	import Title from './../_components/Title.svelte'
	import Help from './../_components/Help.svelte'
	import Features from './../_components/Features.svelte'
	
</script>

<Title {title} {description} />

<Demo id={id}>
	<Popover>
		<Button slot="trigger" let:toggleOpened on:click={toggleOpened}>open</Button>
		<div>
			<p style:color="white">Content</p>
		</div>
	</Popover>
</Demo>

<Features features={[
"Keyboard support",
"Screen Reader capable",
"Floating",
"Custom Content"
]} />

## Quickstart

```svelte
<script>
	import {Popover,Button} from '@steeze-ui/components'

</script>

<Popover>
	<Button slot="trigger">open</Button>
	<div slot="content">
		content
	</div>
</Popover>
```

## API Reference

| Property                                                                                  | Type                                     | Default                             |
| ----------------------------------------------------------------------------------------- | ---------------------------------------- | ----------------------------------- |
| `items`<Help text="The values to choose from" />                                          | <code hl>SelectItem[]</code>             | <code hl>[]</code>                  |
| `value`<Help text="The selected value" />                                                 | <code hl>SelectItem</code>               | <code hl>null</code>                |
| `itemLabelRenderer`<Help text="How to represent the value" />                             | <code hl>(e:SelectItem) => string</code> | <code hl>e => e?.label ?? ""</code> |
| `groupBy`<Help text="Group Items by a given key" />                                       | <code hl>(e:SelectItem) => string</code> | <code hl>null</code>                |
| `identifier`<Help text="Unique identifier of the item, used for internal calculations" /> | <code hl>String</code>                   | <code hl>"id"</code>                |
| `placeholder`<Help text="What to show when no value is selected" />                       | <code hl>String</code>                   | <code hl>""</code>                  |
| `focus`<Help text="Focus when the component mounts" />                                    | <code hl>Boolean</code>                  | <code hl>false</code>               |
| `searchable`<Help text="Allow the user to search for items " />                           | <code hl>Boolean</code>                  | <code hl>false</code>               |
| `clearable`<Help text="Allow the user to clear the selected value " />                    | <code hl>Boolean</code>                  | <code hl>false</code>               |
| `position`<Help text="Prefered initial position of the floating menu" />                  | <code hl>FloatingPosition</code>         | <code hl>"bottom"</code>            |
| `width`<Help text="Width of the container" />                                             | <code hl>String</code>                   | <code hl>"100"</code>               |
| `loop`<Help text="Allow to loop when using the Arrows to navigate through the items" />   | <code hl>Boolean</code>                  | <code hl>false</code>               |

## Examples

### Custom Value Renderer

Changes how the label will be rendered for the Input and Selector Items. This is needed in case where your item object has no `label` property

```svelte
<script>
	const items = [{id:"1",value:"value 1"}]
</script>

<Select {items} itemLabelRenderer={(e)=>`Item: ${e.value}`} />
```

### Custom Identifier

In case your item object comes with a different identifier you can change the default identifier of `id` to your needs

```svelte
<script>
	const items = [{key:"1",label:"value 1"}]
</script>

<Select {items} identifier="key" />
```

### Custom Label Renderer

Render a completely custom Menu Item using the `item` slot and its `let:` properties. Don't forget to apply the `id`, to make it accessible for screen readers

```svelte
<Select {items}>
	<p
		slot="item"
		let:id let:item let:label
		let:focused let:selected
		let:onSelect let:onFocus
		{id}
		on:pointerdown={onSelect}
		on:pointerover={onFocus}
		style:background-color={focused ? "blue" : "" }
		style:color={selected ? "red" : "" }
	>
		{label}
	</p>
</Select>
```

### Grouping Items

Sort items by Grouping them together.

```svelte
<script>
	const items = [
		{id:"1",value:"Value 1",group:"Group 1"},
		{id:"2",value:"Value 2",group:"Group 2"},
		{id:"3",value:"Value 3",group:"Group 2"},
	]
</script>

<Select {items} groupBy={(e)=>e.group} />
```
